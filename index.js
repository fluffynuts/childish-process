// Generated by CoffeeScript 1.9.3
var exe, exec, handlers, index, merge, options, ref, run, spawn,
  slice = [].slice;

require("source-map-support").install();

ref = require("child_process"), exec = ref.exec;
spawn = require('cross-spawn-async');

merge = require("lodash.merge");

options = require("./options");

exe = function(cmd, opts, cb) {
  return exec(cmd, opts, function(err, stdout, stderr) {
    if (stderr) {
      process.stderr.write(stderr);
    }
    if (err !== null) {
      return console.trace(JSON.stringify(err, null, 2));
    } else if (cb != null) {
      return cb(stdout);
    } else {
      return process.stdout.write(stdout);
    }
  });
};

handlers = function(opts) {
  var defaults;
  defaults = {
    stdout: function(data) {
      return process.stdout.write(data);
    },
    stderr: function(data) {
      return process.stderr.write(data);
    },
    error: function(err, context) {
      return console.trace(JSON.stringify(err, null, 2));
    },
    close: function(code, context) {
      if (code !== 0) {
        return console.log("This `" + context.cmd + "` process exited with " + code + ".");
      }
    }
  };
  if (opts != null) {
    return merge({}, defaults, opts);
  } else {
    return defaults;
  }
};

run = function(cmd, opts) {
  var chips, cmdArgs, command, context, handles;
  if (opts == null) {
    opts = {};
  }
  if (typeof cmd !== "string") {
    console.log("Expecting command string, instead got:");
    console.log(cmd);
    throw new Error("Wrong command type: '" + (typeof cmd) + "'.");
  }
  cmdArgs = cmd.split(/\s+/);
  command = cmdArgs.shift();
  handles = handlers(opts.childish);
  context = {
    "cmd": cmd
  };
  chips = spawn(command, cmdArgs, opts);
  chips.stdout.on("data", function(data) {
    return handles.stdout(data);
  });
  chips.stderr.on("data", function(data) {
    return handles.stderr(data);
  });
  chips.on("error", function(err) {
    return handles.error(err, context);
  });
  return chips.on("close", function(code) {
    return handles.close(code, context);
  });
};

index = function() {
  var args, cmd, n;
  cmd = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
  n = args.length;
  if (n > 0) {
    if (typeof args[n - 1] === "function") {
      if (n === 1) {
        return exe(cmd, {}, args[0]);
      } else {
        return exe(cmd, args[0], args[n - 1]);
      }
    } else {
      if (args[0].childish != null) {
        args[0].childish = options(args[0].childish);
      }
      return run(cmd, args[0]);
    }
  } else {
    return run(cmd);
  }
};

module.exports = function() {
  var rest, what;
  what = arguments[0], rest = 2 <= arguments.length ? slice.call(arguments, 1) : [];
  if (arguments.length === 1 && typeof what === "object") {
    return function() {
      var args, cmd;
      cmd = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      if (args.length) {
        if (typeof args[args.length - 1] === "function") {
          return index.apply(null, arguments);
        } else {
          return index.call(null, cmd, merge({}, what, args[0]));
        }
      } else {
        return index.call(null, cmd);
      }
    };
  } else {
    return index.apply(null, arguments);
  }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaW5kZXguY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFBLDJEQUFBO0VBQUE7O0FBQUEsT0FBQSxDQUFRLG9CQUFSLENBQTZCLENBQUMsT0FBOUIsQ0FBQTs7QUFFQSxNQUFnQixPQUFBLENBQVEsZUFBUixDQUFoQixFQUFDLFdBQUEsSUFBRCxFQUFPLFlBQUE7O0FBQ1AsS0FBQSxHQUFRLE9BQUEsQ0FBUSxjQUFSOztBQUNSLE9BQUEsR0FBVSxPQUFBLENBQVEsV0FBUjs7QUFHVixHQUFBLEdBQU0sU0FBQyxHQUFELEVBQU0sSUFBTixFQUFZLEVBQVo7U0FDSixJQUFBLENBQUssR0FBTCxFQUFVLElBQVYsRUFBZ0IsU0FBQyxHQUFELEVBQU0sTUFBTixFQUFjLE1BQWQ7SUFDZCxJQUFnQyxNQUFoQztNQUFBLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBZixDQUFxQixNQUFyQixFQUFBOztJQUNBLElBQUcsR0FBQSxLQUFTLElBQVo7YUFDRSxPQUFPLENBQUMsS0FBUixDQUFjLElBQUksQ0FBQyxTQUFMLENBQWUsR0FBZixFQUFvQixJQUFwQixFQUEwQixDQUExQixDQUFkLEVBREY7S0FBQSxNQUVLLElBQUcsVUFBSDthQUNILEVBQUEsQ0FBRyxNQUFILEVBREc7S0FBQSxNQUFBO2FBR0gsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFmLENBQXFCLE1BQXJCLEVBSEc7O0VBSlMsQ0FBaEI7QUFESTs7QUFXTixRQUFBLEdBQVcsU0FBQyxJQUFEO0FBQ1QsTUFBQTtFQUFBLFFBQUEsR0FDRTtJQUFBLE1BQUEsRUFBUSxTQUFDLElBQUQ7YUFBVSxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQWYsQ0FBcUIsSUFBckI7SUFBVixDQUFSO0lBQ0EsTUFBQSxFQUFRLFNBQUMsSUFBRDthQUFVLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBZixDQUFxQixJQUFyQjtJQUFWLENBRFI7SUFFQSxLQUFBLEVBQU8sU0FBQyxHQUFELEVBQU0sT0FBTjthQUFrQixPQUFPLENBQUMsS0FBUixDQUFjLElBQUksQ0FBQyxTQUFMLENBQWUsR0FBZixFQUFvQixJQUFwQixFQUEwQixDQUExQixDQUFkO0lBQWxCLENBRlA7SUFHQSxLQUFBLEVBQU8sU0FBQyxJQUFELEVBQU8sT0FBUDtNQUNMLElBQU8sSUFBQSxLQUFRLENBQWY7ZUFDRSxPQUFPLENBQUMsR0FBUixDQUFZLFFBQUEsR0FBUyxPQUFPLENBQUMsR0FBakIsR0FBcUIsd0JBQXJCLEdBQTZDLElBQTdDLEdBQWtELEdBQTlELEVBREY7O0lBREssQ0FIUDs7RUFNRixJQUFHLFlBQUg7V0FDRSxLQUFBLENBQU0sRUFBTixFQUFVLFFBQVYsRUFBb0IsSUFBcEIsRUFERjtHQUFBLE1BQUE7V0FHRSxTQUhGOztBQVJTOztBQWNYLEdBQUEsR0FBTSxTQUFDLEdBQUQsRUFBTSxJQUFOO0FBQ0osTUFBQTs7SUFEVSxPQUFPOztFQUNqQixJQUFPLE9BQU8sR0FBUCxLQUFjLFFBQXJCO0lBQ0UsT0FBTyxDQUFDLEdBQVIsQ0FBWSx3Q0FBWjtJQUNBLE9BQU8sQ0FBQyxHQUFSLENBQVksR0FBWjtBQUNBLFVBQVUsSUFBQSxLQUFBLENBQU0sdUJBQUEsR0FBdUIsQ0FBQyxPQUFPLEdBQVIsQ0FBdkIsR0FBbUMsSUFBekMsRUFIWjs7RUFJQSxPQUFBLEdBQVUsR0FBRyxDQUFDLEtBQUosQ0FBVSxLQUFWO0VBQ1YsT0FBQSxHQUFVLE9BQU8sQ0FBQyxLQUFSLENBQUE7RUFDVixPQUFBLEdBQVUsUUFBQSxDQUFTLElBQUksQ0FBQyxRQUFkO0VBQ1YsT0FBQSxHQUFVO0lBQUEsS0FBQSxFQUFPLEdBQVA7O0VBQ1YsS0FBQSxHQUFRLEtBQUEsQ0FBTSxPQUFOLEVBQWUsT0FBZixFQUF3QixJQUF4QjtFQUNSLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBYixDQUFnQixNQUFoQixFQUF3QixTQUFDLElBQUQ7V0FBVSxPQUFPLENBQUMsTUFBUixDQUFlLElBQWY7RUFBVixDQUF4QjtFQUNBLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBYixDQUFnQixNQUFoQixFQUF3QixTQUFDLElBQUQ7V0FBVSxPQUFPLENBQUMsTUFBUixDQUFlLElBQWY7RUFBVixDQUF4QjtFQUNBLEtBQUssQ0FBQyxFQUFOLENBQVMsT0FBVCxFQUFrQixTQUFDLEdBQUQ7V0FBUyxPQUFPLENBQUMsS0FBUixDQUFjLEdBQWQsRUFBbUIsT0FBbkI7RUFBVCxDQUFsQjtTQUNBLEtBQUssQ0FBQyxFQUFOLENBQVMsT0FBVCxFQUFrQixTQUFDLElBQUQ7V0FBVSxPQUFPLENBQUMsS0FBUixDQUFjLElBQWQsRUFBb0IsT0FBcEI7RUFBVixDQUFsQjtBQWJJOztBQWVOLEtBQUEsR0FBUSxTQUFBO0FBQ04sTUFBQTtFQURPLG9CQUFLO0VBQ1osQ0FBQSxHQUFJLElBQUksQ0FBQztFQUNULElBQUcsQ0FBQSxHQUFJLENBQVA7SUFDRSxJQUFHLE9BQU8sSUFBSyxDQUFBLENBQUEsR0FBSSxDQUFKLENBQVosS0FBc0IsVUFBekI7TUFDRSxJQUFHLENBQUEsS0FBSyxDQUFSO2VBQ0UsR0FBQSxDQUFJLEdBQUosRUFBUyxFQUFULEVBQWEsSUFBSyxDQUFBLENBQUEsQ0FBbEIsRUFERjtPQUFBLE1BQUE7ZUFJRSxHQUFBLENBQUksR0FBSixFQUFTLElBQUssQ0FBQSxDQUFBLENBQWQsRUFBa0IsSUFBSyxDQUFBLENBQUEsR0FBSSxDQUFKLENBQXZCLEVBSkY7T0FERjtLQUFBLE1BQUE7TUFRRSxJQUFHLHdCQUFIO1FBQ0UsSUFBSyxDQUFBLENBQUEsQ0FBRSxDQUFDLFFBQVIsR0FBbUIsT0FBQSxDQUFRLElBQUssQ0FBQSxDQUFBLENBQUUsQ0FBQyxRQUFoQixFQURyQjs7YUFFQSxHQUFBLENBQUksR0FBSixFQUFTLElBQUssQ0FBQSxDQUFBLENBQWQsRUFWRjtLQURGO0dBQUEsTUFBQTtXQWFFLEdBQUEsQ0FBSSxHQUFKLEVBYkY7O0FBRk07O0FBaUJSLE1BQU0sQ0FBQyxPQUFQLEdBQWlCLFNBQUE7QUFDZixNQUFBO0VBRGdCLHFCQUFNO0VBQ3RCLElBQUcsU0FBUyxDQUFDLE1BQVYsS0FBb0IsQ0FBcEIsSUFBMEIsT0FBTyxJQUFQLEtBQWUsUUFBNUM7QUFDRSxXQUFPLFNBQUE7QUFDTCxVQUFBO01BRE0sb0JBQUs7TUFDWCxJQUFHLElBQUksQ0FBQyxNQUFSO1FBQ0UsSUFBRyxPQUFPLElBQUssQ0FBQSxJQUFJLENBQUMsTUFBTCxHQUFjLENBQWQsQ0FBWixLQUFnQyxVQUFuQztpQkFJRSxLQUFLLENBQUMsS0FBTixDQUFZLElBQVosRUFBa0IsU0FBbEIsRUFKRjtTQUFBLE1BQUE7aUJBTUUsS0FBSyxDQUFDLElBQU4sQ0FBVyxJQUFYLEVBQWlCLEdBQWpCLEVBQXNCLEtBQUEsQ0FBTSxFQUFOLEVBQVUsSUFBVixFQUFnQixJQUFLLENBQUEsQ0FBQSxDQUFyQixDQUF0QixFQU5GO1NBREY7T0FBQSxNQUFBO2VBVUUsS0FBSyxDQUFDLElBQU4sQ0FBVyxJQUFYLEVBQWlCLEdBQWpCLEVBVkY7O0lBREssRUFEVDtHQUFBLE1BQUE7V0FjRSxLQUFLLENBQUMsS0FBTixDQUFZLElBQVosRUFBa0IsU0FBbEIsRUFkRjs7QUFEZSIsInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoXCJzb3VyY2UtbWFwLXN1cHBvcnRcIikuaW5zdGFsbCgpXG5cbntleGVjLCBzcGF3bn0gPSByZXF1aXJlKFwiY2hpbGRfcHJvY2Vzc1wiKVxubWVyZ2UgPSByZXF1aXJlKFwibG9kYXNoLm1lcmdlXCIpXG5vcHRpb25zID0gcmVxdWlyZShcIi4vb3B0aW9uc1wiKVxuXG4jIGV4ZWMgI3NpbXBsZVxuZXhlID0gKGNtZCwgb3B0cywgY2IpIC0+XG4gIGV4ZWMgY21kLCBvcHRzLCAoZXJyLCBzdGRvdXQsIHN0ZGVycikgLT5cbiAgICBwcm9jZXNzLnN0ZGVyci53cml0ZShzdGRlcnIpIGlmIHN0ZGVyclxuICAgIGlmIGVyciBpc250IG51bGxcbiAgICAgIGNvbnNvbGUudHJhY2UgSlNPTi5zdHJpbmdpZnkoZXJyLCBudWxsLCAyKVxuICAgIGVsc2UgaWYgY2I/XG4gICAgICBjYihzdGRvdXQpXG4gICAgZWxzZVxuICAgICAgcHJvY2Vzcy5zdGRvdXQud3JpdGUoc3Rkb3V0KVxuXG4jIGV2ZW50LWhhbmRsZXIgZGVmYXVsdHMgLyBvdmVycmlkZXNcbmhhbmRsZXJzID0gKG9wdHMpIC0+XG4gIGRlZmF1bHRzID1cbiAgICBzdGRvdXQ6IChkYXRhKSAtPiBwcm9jZXNzLnN0ZG91dC53cml0ZShkYXRhKVxuICAgIHN0ZGVycjogKGRhdGEpIC0+IHByb2Nlc3Muc3RkZXJyLndyaXRlKGRhdGEpXG4gICAgZXJyb3I6IChlcnIsIGNvbnRleHQpIC0+IGNvbnNvbGUudHJhY2UgSlNPTi5zdHJpbmdpZnkoZXJyLCBudWxsLCAyKVxuICAgIGNsb3NlOiAoY29kZSwgY29udGV4dCkgLT5cbiAgICAgIHVubGVzcyBjb2RlIGlzIDBcbiAgICAgICAgY29uc29sZS5sb2cgXCJUaGlzIGAje2NvbnRleHQuY21kfWAgcHJvY2VzcyBleGl0ZWQgd2l0aCAje2NvZGV9LlwiXG4gIGlmIG9wdHM/XG4gICAgbWVyZ2Uoe30sIGRlZmF1bHRzLCBvcHRzKVxuICBlbHNlXG4gICAgZGVmYXVsdHNcblxuIyBzcGF3biAjc2ltcGxlXG5ydW4gPSAoY21kLCBvcHRzID0ge30pIC0+XG4gIHVubGVzcyB0eXBlb2YgY21kIGlzIFwic3RyaW5nXCJcbiAgICBjb25zb2xlLmxvZyBcIkV4cGVjdGluZyBjb21tYW5kIHN0cmluZywgaW5zdGVhZCBnb3Q6XCJcbiAgICBjb25zb2xlLmxvZyBjbWRcbiAgICB0aHJvdyBuZXcgRXJyb3IgXCJXcm9uZyBjb21tYW5kIHR5cGU6ICcje3R5cGVvZiBjbWR9Jy5cIlxuICBjbWRBcmdzID0gY21kLnNwbGl0IC9cXHMrL1xuICBjb21tYW5kID0gY21kQXJncy5zaGlmdCgpXG4gIGhhbmRsZXMgPSBoYW5kbGVycyhvcHRzLmNoaWxkaXNoKVxuICBjb250ZXh0ID0gXCJjbWRcIjogY21kXG4gIGNoaXBzID0gc3Bhd24oY29tbWFuZCwgY21kQXJncywgb3B0cylcbiAgY2hpcHMuc3Rkb3V0Lm9uIFwiZGF0YVwiLCAoZGF0YSkgLT4gaGFuZGxlcy5zdGRvdXQoZGF0YSlcbiAgY2hpcHMuc3RkZXJyLm9uIFwiZGF0YVwiLCAoZGF0YSkgLT4gaGFuZGxlcy5zdGRlcnIoZGF0YSlcbiAgY2hpcHMub24gXCJlcnJvclwiLCAoZXJyKSAtPiBoYW5kbGVzLmVycm9yKGVyciwgY29udGV4dClcbiAgY2hpcHMub24gXCJjbG9zZVwiLCAoY29kZSkgLT4gaGFuZGxlcy5jbG9zZShjb2RlLCBjb250ZXh0KVxuXG5pbmRleCA9IChjbWQsIGFyZ3MuLi4pIC0+XG4gIG4gPSBhcmdzLmxlbmd0aFxuICBpZiBuID4gMFxuICAgIGlmIHR5cGVvZiBhcmdzW24gLSAxXSBpcyBcImZ1bmN0aW9uXCJcbiAgICAgIGlmIG4gaXMgMVxuICAgICAgICBleGUgY21kLCB7fSwgYXJnc1swXVxuICAgICAgZWxzZVxuICAgICAgICAjIGV4ZSB0YWtlcyBhdCBtb3N0IDMgYXJndW1lbnRzIChoZXJlIHVzaW5nIHRoZSBmaXJzdCAmIGxhc3Qgb2YgYXJncylcbiAgICAgICAgZXhlIGNtZCwgYXJnc1swXSwgYXJnc1tuIC0gMV1cbiAgICBlbHNlXG4gICAgICAjIHJ1biB0YWtlcyBhdCBtb3N0IDIgYXJndW1lbnRzLCB0aGUgMm5kLCBvcHRpb25zLCBjb3VsZCBjb250YWluIGNoaWxkaXNoXG4gICAgICBpZiBhcmdzWzBdLmNoaWxkaXNoP1xuICAgICAgICBhcmdzWzBdLmNoaWxkaXNoID0gb3B0aW9ucyhhcmdzWzBdLmNoaWxkaXNoKSAjIHNwZWNpYWwgY2hpbGRpc2ggb3B0aW9uc1xuICAgICAgcnVuIGNtZCwgYXJnc1swXVxuICBlbHNlXG4gICAgcnVuIGNtZFxuXG5tb2R1bGUuZXhwb3J0cyA9ICh3aGF0LCByZXN0Li4uKSAtPlxuICBpZiBhcmd1bWVudHMubGVuZ3RoIGlzIDEgYW5kIHR5cGVvZiB3aGF0IGlzIFwib2JqZWN0XCJcbiAgICByZXR1cm4gKGNtZCwgYXJncy4uLikgLT5cbiAgICAgIGlmIGFyZ3MubGVuZ3RoXG4gICAgICAgIGlmIHR5cGVvZiBhcmdzW2FyZ3MubGVuZ3RoIC0gMV0gaXMgXCJmdW5jdGlvblwiXG4gICAgICAgICAgIyBOT1RFOiBleGVjIGlnbm9yZXMgZGVmYXVsdCBvcHRpb25zIGZvciBub3csXG4gICAgICAgICAgIyBhcyBpdCBkb2Vzbid0IG5lZWQgdGhlbSBsaWtlIHNwYXduIChtb3JlIHVzZWZ1bCBhbmQgZmF2b3JlZCkuXG4gICAgICAgICAgIyBUcmVhdGluZyB0aGlzIGFzIF9ZQUdOSV8sIHRob3VnaCBpdCBtYXkgYmUgZWFzeSB0byBpbXBsZW1lbnQuLi5cbiAgICAgICAgICBpbmRleC5hcHBseSBudWxsLCBhcmd1bWVudHNcbiAgICAgICAgZWxzZVxuICAgICAgICAgIGluZGV4LmNhbGwgbnVsbCwgY21kLCBtZXJnZSh7fSwgd2hhdCwgYXJnc1swXSlcbiAgICAgIGVsc2VcbiAgICAgICAgIyBzcGF3biB3aXRoIG5vIG9wdGlvbnMgLSBleGNlcHQgYHdoYXRgLWV2ZXIgZGVmYXVsdHNcbiAgICAgICAgaW5kZXguY2FsbCBudWxsLCBjbWRcbiAgZWxzZVxuICAgIGluZGV4LmFwcGx5IG51bGwsIGFyZ3VtZW50c1xuIl19